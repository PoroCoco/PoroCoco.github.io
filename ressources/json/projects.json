[
    {
        "title" : "High-Performance Matrix Multiplication & LU-Factorization: Vectorized, Multicore, Distributed & GPU-Accelerated",
        "date" : "2025",
        "type" : "Master's Project",
        "description" : "For my master's project, I developed and optimized HPC kernels for in-memory dense double precision matrix-matrix multiplication (DGEMM) and LU factorization (DGETRF). The optimization was performed at all levels. Single-core: Achieved OpenBLAS performance through manual vectorization (AVX2) and FMA instructions, maximizing register usage in x86 assembly. Multicore: Implemented efficient OpenMP parallelization, outperforming OpenBLAS and achieving significantly lower performance variance. Distributed computing: Designed an MPI-based parallelization, demonstrating strong and weak scalability across multiple nodes. GPU acceleration: Developed a CUDA-optimized version. The GEMM implementation reached performance equivalent to Intel MKL, proving competitive across different matrix sizes and transpositions. Key improvements for future work were also identified such as NUMA-aware optimizations and better MPI+OpenMP block partitioning.",
        "tags" : ["C", "MPI", "CUDA", "SIMD", "MPI", "OpenMP", "x86 Assembly"],
        "icons" : 
        [
            {"alt" : "Presentation Slides", "link" : "ressources/pdf/presentation_hpc_project.pdf", "path" : "/images/icon_presentation.png"}
        ],
        "media" :
        [
            {"alt-text" : "Single core GEMM performance graph",  "path" : "/images/Projet HPC-18.jpg"},
            {"alt-text" : "DGETRF Block technique",  "path" : "/images/Projet HPC-43.jpg"}
        ]
    },
    {
        "title": "Teratec HPC Hackathon 2025: ARM-AWS Optimization of Code_Aster & Black-Scholes Equations",
        "date": "2025",
        "type": "Hackathon Competition",
        "description": "Participated in a 4-person team at the Teratec HPC Hackathon, competing against other Master's students in HPC from all over Europe. Optimized Viridien's Black-Scholes Monte Carlo simulator and EDF's structural mechanics code (Code_Aster) on AWS Graviton4 ARM clusters. For Viridien's Code Serial, we replaced inefficient C++ random number generation with ARM Performance Libraries (ARMPL), achieving a 478x speedup through SVE2-vectorized batches, OpenMP multithreading across Graviton-4's 96 cores, and buffer size autotuning. Precision was validated against double-precision benchmarks. To reduce exponential computations, the mathematical formula was rewritten to skip non-contributing branches and enable efficient vectorization. For Code_Aster, we resolved compilation challenges by downgrading dependencies, patching MEDCoupling library errors, and benchmarking PETSc/MUMPS solvers. A full compilation script was written to reproduce the results. Benchmarks of weak scalability, communication volumes, and time allocation were conducted.",
        "tags" : ["ARM", "SVE", "C"],
        "icons" : 
        [
            {"alt" : "PDF Report", "link" : "ressources/pdf/teratec_hackthon.pdf", "path" : "/images/icon_pdf.png"}
        ],
        "media" :
        [
            {"alt-text" : "Banner Hackathon",  "path" : "/images/Hackthon_banner.jpg"}
        ]
    },
    {
        "title" : "Operating System for RISC-V Processors",
        "date" : "2024",
        "type" : "Personal Project",
        "description" : "During my semester abroad at Keio University, I joined the Computer Science club, Keio Computer Society, where I taught OS concepts to three undergraduates through the development of an operating system built from the ground up in C as a team. Features process creation and scheduling, virtual memory with pages, system calls and trap handling, basic I/O operations and shell program running in user space.",
        "tags" : ["C", "OS", "RISC-V"],
        "icons" : 
        [
        ],
        "media" :
        [
            {"alt-text" : "Terminal about of the QEMU launch with user space shell",  "path" : "/images/os_terminal.png"}
        ]
    },
    {
        "title" : "Computer Vision Projects :<br>3D Projection | Photometric Stereo | Image Stitcher ",
        "date" : "2024",
        "type" : "School Project",
        "description" : "Compilation of various Computer Vision projects, including Photometric Stereo using Lambertian Reflectance Maps, automatic Image Stitching with geometric transforms and feature matching, and real-time 3D object projection on checkerboard patterns. Implemented key OpenCV functions using NumPy.",
        "tags" : ["Python", "OpenCV", "Numpy", "Computer Vision"],
        "icons" : 
        [
            {"alt" : "Report", "link" : "ressources/pdf/photometric_stereo.pdf", "path" : "/images/icon_pdf.png"}
        ],
        "media" :
        [
            {"alt-text" : "Youtube video showcase for Photometric stereo",  "path" : "/youtube/https://www.youtube.com/watch?v=4jEdv5bEzTo"},
            {"alt-text" : "Stiching image of a palace",  "path" : "/images/cv-palace.png"},
            {"alt-text" : "Stiching image a balcony",  "path" : "/images/cv-balcony.png"},
            {"alt-text" : "3D Projection of a cube",  "path" : "/images/cv-cube_projection.png"}
        ]
    },
    {
        "title" : "Voxel Game Engine",
        "date" : "2024",
        "type" : "Personal Project",
        "description" : "A Minecraft clone made from scratch in C and OpenGL. It renders in real time at over 120 fps, handling more than 4 Billion voxels. The project features custom data structures, including hashtables and producer-consumer queues. Chunk generation is optimized and multi-threaded, utilizing greedy meshing and bit-packed data for efficient GPU communication. OpenGL operates on a separate rendering thread, ensuring smooth performance. The project also supports cross-platform compilation.",
        "tags" : ["C", "OpenGL", "Parallel", "Graphics"],
        "icons" : 
        [
            {"alt" : "Github Repo", "link" : "https://github.com/PoroCoco/C-Minecraft", "path" : "/images/icon_github.png"}
        ],
        "media" :
        [
            {"alt-text" : "Youtube video for chunk generation demo",  "path" : "/youtube/https://www.youtube.com/watch?v=XrN-4W7g4n8"},
            {"alt-text" : "Screenshot from a lake view with performance metrics",  "path" : "/images/voxel_main.png"}
        ]
    },
    {
        "title" : "Vulkan Renderer",
        "date" : "2024",
        "type" : "Personal Project",
        "description" : "A simple vulkan based renderer. It can load models and have a camera module to navigate in the scene. It's a work in progress project and still is very barebone.",
        "tags" : ["C++", "Vulkan", "Graphics", "GPU"],
        "icons" : 
        [
            {"alt" : "Github Repo", "link" : "https://github.com/PoroCoco/Vulkan-Engine", "path" : "/images/icon_github.png"}
        ],
        "media" :
        [
            {"alt-text" : "Vulkan wireframe truck model spinning",  "path" : "/videos/vulkan_wireframe_truck.mp4"},
            {"alt-text" : "Vulkan Vokselia Spawn basic render",  "path" : "/images/vulkan_vokselia_spawn.png"}
        ]
    },
    {
        "title" : "Physics Engine",
        "date" : "2023",
        "type" : "Personal Project",
        "description" : "Physics engine using verlet integration to compute the positions. The simulation have a spatial hashing structure applied to the objects to be able to quickly detect collisions to solve them with multiple threads along with SIMD instructions from the Intel intrinsics. It uses OpenGL to render the simulation.",
        "tags" : ["C", "OpenGL", "ImGui", "Physics"],
        "icons" : 
        [
            {"alt" : "Github Repo", "link" : "https://github.com/PoroCoco/Physics-Engine-Verlet", "path" : "/images/icon_github.png"}
        ],
        "media" :
        [
            {"alt-text" : "simulation interaction gif",  "path" : "/videos/physics_rope.webm"},
            {"alt-text" : "simulated web",  "path" : "/videos/physics_web.webm"}
        ]
    },
    {
        "title" : "Game of the Amazons",
        "date" : "2023",
        "type" : "School Project",
        "description" : "Generic implementation of the <a href=\"https://en.wikipedia.org/wiki/Game_of_the_Amazons\" target=\"_blank\">Game of the Amazons</a>, a two player board game, with an AI opponent. This project was developed in team of 4 students. I led my team's software architecture and optimisations which, in addition to our advanced heuristics, made us win the competition against 28 other teams' AIs. KCacheGrind and Gprof were used for the needed optimisations as winning an Amazons game is a PSPACE-complete problem. The board is represented as a sparse matrix using <abbr title=\"GNU Scientific Library\">GSL</abbr>.<br>I made my own web port using WebAssembly.",
        "tags" : ["C", "<abbr title=\"GNU Scientific Library\">GSL</abbr>", "WebAssembly", "AI"],
        "icons" : 
        [
            {"alt" : "Report", "link" : "ressources/pdf/report_amazons_fr.pdf", "path" : "/images/icon_pdf.png"},
            {"alt" : "Github Repo", "link" : "https://github.com/PoroCoco/Amazons-Game", "path" : "/images/icon_github.png"}
        ],
        "media" :
        [

        ]
    },
    {
        "title" : "Distributed I/O Scheduler for Parallel File Systems in Supercomputers",
        "date" : "2023",
        "type" : "Professional Project",
        "description" : "This program was written during my internship at <abbr title=\"French Institute for Research in Computer Science\">INRIA</abbr>. It allows the user to describe an I/O scenario in a HPC context, multiple applications each running multiple processes, and runs it while logging the metrics. This was done in order to test a distributed I/O scheduler that I wrote to improve the <a href=\"https://inria.hal.science/hal-03648225/document\" target=\"_blank\">IO-Sets</a> management method implementation that was limited to a single process. Futhermore, my implementation had the benefit of handling low-bandwidth applications whereas the original one had a linear scaling with these.",
        "tags" : ["C", "I/O", "MPI", "Data Visualization", "HPC"],
        "icons" : 
        [
            {"alt" : "Presentation Slides", "link" : "ressources/pdf/io-sets_presentation.pdf", "path" : "/images/icon_presentation.png"},
            {"alt" : "Report", "link" : "https://gitlab.inria.fr/lpeyrond/io-sets-distributed/-/blob/main/README.md?ref_type=heads#report", "path" : "/images/icon_pdf.png"},
            {"alt" : "Gitlab Repo", "link" : "https://gitlab.inria.fr/lpeyrond/io-sets-distributed", "path" : "/images/icon_github.png"}
        ],
        "media" :
        [
            {"alt-text" : "Diagram of the program",  "path" : "/images/io-sets_diagram.png"},
            {"alt-text" : "Graph showing the Round Trip Time of I/O requests on 3 sets",  "path" : "/images/io-sets_exclusive.png"}
        ]
    },
    {
        "title" : "MyAeNetwork",
        "date" : "2021",
        "type" : "Personnal Project",
        "description" : "MyAeNetwork is a program that allow modded Minecraft users to access and control their Applied Energistics storage from the web. It consists of a OpenComputer LUA program that act as a client that sends the storage information through a TCP socket with a custom protocol to a TCP server that handles every clients. A web interface with user logging is build on top and let players connect to their private storage to view its state and send crafting requests.",
        "tags" : ["Lua", "TCP Socket", "Networking", "Python", "Flask", "SQL"],
        "icons" : 
        [
            {"alt" : "Github Repo", "link" : "https://github.com/PoroCoco/myaenetwork", "path" : "/images/icon_github.png"}
        ],
        "media" :
        [
            {"alt-text" : "Demo of the program",  "path" : "/videos/myaenetwork.webm"}
        ]
    }
]
